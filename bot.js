require('dotenv').config();
const { Client, GatewayIntentBits, EmbedBuilder, REST, Routes, SlashCommandBuilder, PermissionsBitField } = require('discord.js');
const axios = require('axios');

const DISCORD_TOKEN = process.env.DISCORD_TOKEN;
const MISTRAL_API_KEY = process.env.MISTRAL_API_KEY;
const CLIENT_ID = process.env.CLIENT_ID;
const GUILD_ID = process.env.GUILD_ID;
const YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;

// V√©rification des variables d'environnement critiques
if (!DISCORD_TOKEN || !MISTRAL_API_KEY || !CLIENT_ID || !GUILD_ID) {
    console.error("‚ùå Une ou plusieurs variables d'environnement sont manquantes (.env). V√©rifiez DISCORD_TOKEN, MISTRAL_API_KEY, CLIENT_ID, GUILD_ID.");
    process.exit(1);
}

const client = new Client({ intents: [GatewayIntentBits.Guilds] });

async function askMistral(prompt) {
    try {
        const response = await axios.post(
            'https://api.mistral.ai/v1/chat/completions',
            {
                model: "mistral-tiny",
                messages: [{ role: "user", content: prompt }],
                max_tokens: 300
            },
            {
                headers: {
                    'Authorization': `Bearer ${MISTRAL_API_KEY}`,
                    'Content-Type': 'application/json'
                }
            }
        );
        return response.data.choices[0].message.content;
    } catch (err) {
        console.error("Erreur lors de l'appel √† Mistral:", err?.response?.data || err.message);
        return "‚ùå Impossible d'obtenir une r√©ponse de l'IA pour le moment.";
    }
}

// Utilitaire pour tronquer √† 1024 caract√®res (Discord embed field limit)
function truncateField(text) {
    if (!text) return '';
    return text.length > 1024 ? text.slice(0, 1021) + '...' : text;
}

// Enregistrement des slash commands
const commands = [
    new SlashCommandBuilder().setName('help').setDescription('Affiche le menu d\'aide'),
    new SlashCommandBuilder().setName('steuff').setDescription('Astuces pour se steuffer rapidement'),
    new SlashCommandBuilder().setName('astuce').setDescription('Obtiens une astuce personnalis√©e').addStringOption(opt => opt.setName('question').setDescription('Ta question').setRequired(false)),
    new SlashCommandBuilder().setName('map').setDescription('Lien vers une map interactive gratuite'),
    new SlashCommandBuilder().setName('mistral').setDescription('Pose une question sur le jeu').addStringOption(opt => opt.setName('question').setDescription('Ta question').setRequired(true)),
    new SlashCommandBuilder().setName('quete').setDescription('Astuces pour une qu√™te').addStringOption(opt => opt.setName('nom').setDescription('Nom de la qu√™te').setRequired(true)),
    new SlashCommandBuilder().setName('serveur').setDescription('Affiche le statut des serveurs Gray Zone Warfare'),
    new SlashCommandBuilder().setName('conseil').setDescription('Affiche un conseil du jour pour progresser'),
    new SlashCommandBuilder().setName('notify')
        .setDescription('Envoie une notification sp√©ciale √† tout le monde')
        .addStringOption(opt => opt.setName('message').setDescription('Message √† notifier').setRequired(true)),
    new SlashCommandBuilder().setName('progress')
        .setDescription('Affiche votre progression de qu√™tes'),
    new SlashCommandBuilder().setName('addprogress')
        .setDescription('Ajoute une qu√™te √† votre progression')
        .addStringOption(opt => opt.setName('quete').setDescription('Nom de la qu√™te').setRequired(true)),
    new SlashCommandBuilder()
        .setName('suggestion')
        .setDescription('Obtiens un conseil personnalis√© selon ton style de jeu')
        .addStringOption(opt => opt.setName('style').setDescription('Ton style de jeu (ex: sniper, assaut, soutien, etc.)').setRequired(false)),
    new SlashCommandBuilder()
        .setName('youtube')
        .setDescription('Affiche les 3 derni√®res vid√©os Gray Zone Warfare sur YouTube'),
    new SlashCommandBuilder()
        .setName('reddit')
        .setDescription('Affiche les 3 derniers posts du subreddit GrayZoneWarfare'),
    // Ajoutez d'autres commandes ici si besoin
].map(cmd => cmd.toJSON());

const rest = new REST({ version: '10' }).setToken(DISCORD_TOKEN);

(async () => {
    try {
        await rest.put(
            Routes.applicationGuildCommands(CLIENT_ID, GUILD_ID),
            { body: commands }
        );
        console.log('Slash commands enregistr√©es.');
    } catch (error) {
        console.error("Erreur lors de l'enregistrement des commandes slash:", error?.response?.data || error);
        process.exit(1);
    }
})();

client.on('ready', () => {
    console.log(`Bot connect√© en tant que ${client.user.tag}`);
    client.user.setActivity('Gray Zone Warfare | /help', { type: 'PLAYING' });
});

// Stockage temporaire pour suivi de progression et tickets (√† remplacer par une base de donn√©es pour production)
const userProgress = {};
const tickets = [];

client.on('interactionCreate', async interaction => {
    if (!interaction.isChatInputCommand()) return;
    try {
        if (interaction.commandName === 'help') {
            const embed = new EmbedBuilder()
                .setColor(0x0099FF)
                .setTitle('ü§ñ Gray Zone Warfare Helper')
                .setDescription("Ton assistant ultime pour **Gray Zone Warfare** !\n\nD√©couvre toutes les commandes disponibles ci-dessous :")
                .addFields(
                    { name: '/steuff', value: 'Astuces pour se steuffer rapidement.' },
                    { name: '/astuce', value: 'Obtiens une astuce personnalis√©e.' },
                    { name: '/map', value: 'Lien vers une map interactive gratuite.' },
                    { name: '/mistral', value: 'Pose n\'importe quelle question sur le jeu.' },
                    { name: '/help', value: 'Affiche ce menu d\'aide.' }
                )
                .setFooter({ text: 'D√©velopp√© avec ‚ù§Ô∏è et Mistral AI', iconURL: client.user.displayAvatarURL() })
                .setThumbnail('https://mapgenie.io/_nuxt/img/gray-zone-warfare-logo.3e7e6b6.png');
            await interaction.reply({ embeds: [embed], ephemeral: true });
        }

        if (interaction.commandName === 'steuff') {
            const embed = new EmbedBuilder()
                .setColor(0x43B581)
                .setTitle('‚ö° Astuces pour se steuffer rapidement')
                .setDescription('Voici quelques conseils pour optimiser ton √©quipement :\n*(g√©n√©r√©s par Mistral AI)*');
            const prompt = "Donne-moi des astuces pour se steuffer rapidement dans Gray Zone Warfare.";
            const reply = await askMistral(prompt);
            embed.addFields([{ name: 'Conseils', value: truncateField(reply) }]);
            await interaction.reply({ embeds: [embed] });
        }

        if (interaction.commandName === 'astuce') {
            const question = interaction.options.getString('question') || '';
            const embed = new EmbedBuilder()
                .setColor(0xF1C40F)
                .setTitle('üí° Astuce personnalis√©e')
                .setDescription(`Question : ${question || 'Aucune question pr√©cis√©e.'}`);
            const prompt = `Donne-moi une astuce pour Gray Zone Warfare : ${question}`;
            const reply = await askMistral(prompt);
            embed.addFields([{ name: 'Astuce', value: truncateField(reply) }]);
            await interaction.reply({ embeds: [embed] });
        }

        if (interaction.commandName === 'map') {
            const embed = new EmbedBuilder()
                .setColor(0x7289DA)
                .setTitle('üó∫Ô∏è Map interactive gratuite')
                .setDescription('[Clique ici pour acc√©der √† la map compl√®te !](https://mapgenie.io/gray-zone-warfare/maps/lamang)')
                .setThumbnail('https://mapgenie.io/_nuxt/img/gray-zone-warfare-logo.3e7e6b6.png');
            await interaction.reply({ embeds: [embed] });
        }

        if (interaction.commandName === 'mistral') {
            const question = interaction.options.getString('question');
            const embed = new EmbedBuilder()
                .setColor(0x5865F2)
                .setTitle('ü§î R√©ponse de Mistral AI')
                .setDescription(`Question : ${question}`);
            const prompt = `Tu es un expert de Gray Zone Warfare. ${question}`;
            const reply = await askMistral(prompt);
            embed.addFields([{ name: 'R√©ponse', value: truncateField(reply) }]);
            await interaction.reply({ embeds: [embed] });
        }

        if (interaction.commandName === 'quete') {
            const questName = interaction.options.getString('nom');
            const prompt = `
Tu es un expert de Gray Zone Warfare. Pour la qu√™te "${questName}", donne :
- Un r√©sum√© de la qu√™te
- Les meilleures astuces pour la r√©ussir rapidement
- Un lien vers une vid√©o utile (YouTube)
- Un lien vers la map interactive avec le ping de la zone concern√©e si possible
Pr√©sente la r√©ponse de fa√ßon claire et structur√©e.
            `;
            const reply = await askMistral(prompt);

            const embed = new EmbedBuilder()
                .setColor(0xE67E22)
                .setTitle(`üìú Astuces pour la qu√™te : ${questName}`)
                .setDescription(truncateField(reply))
                .setFooter({ text: 'Gray Zone Warfare Quest Helper', iconURL: client.user.displayAvatarURL() });

            await interaction.reply({ embeds: [embed] });
        }

        if (interaction.commandName === 'serveur') {
            // Remplacez ce bloc par un appel API r√©el si disponible
            const status = 'üü¢ En ligne\nJoueurs connect√©s : 1234\nDerni√®re mise √† jour : il y a 5 min';
            const embed = new EmbedBuilder()
                .setColor(0x2ECC71)
                .setTitle('üåê Statut des serveurs Gray Zone Warfare')
                .setDescription(status);
            await interaction.reply({ embeds: [embed] });
        }

        if (interaction.commandName === 'conseil') {
            // Liste d‚Äôastuces, √† enrichir
            const conseils = [
                "Explore chaque b√¢timent, m√™me les plus petits, pour trouver du loot cach√©.",
                "Utilise la map interactive pour planifier tes d√©placements.",
                "Garde toujours des soins rapides dans ton inventaire.",
                "Travaille en √©quipe pour s√©curiser les zones dangereuses.",
                "Vends les objets inutiles pour acheter de l‚Äô√©quipement rare."
            ];
            const conseil = conseils[Math.floor(Math.random() * conseils.length)];
            const embed = new EmbedBuilder()
                .setColor(0xF39C12)
                .setTitle('üí° Conseil du jour')
                .setDescription(conseil);
            await interaction.reply({ embeds: [embed] });
        }

        // Notification automatique (admin seulement, exemple)
        if (interaction.commandName === 'notify') {
            // V√©rifie la permission administrateur (Discord.js v14)
            if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
                await interaction.reply({ content: "Vous n'avez pas la permission d'envoyer une notification.", ephemeral: true });
                return;
            }
            const notifMsg = interaction.options.getString('message');
            if (!notifMsg || notifMsg.length > 1800) {
                await interaction.reply({ content: "Le message est vide ou trop long (max 1800 caract√®res).", ephemeral: true });
                return;
            }
            const embed = new EmbedBuilder()
                .setColor(0xFF0000)
                .setTitle('üö® Notification sp√©ciale')
                .setDescription(notifMsg);
            await interaction.reply({ content: 'Notification envoy√©e‚ÄØ!', ephemeral: true });
            await interaction.channel.send({ embeds: [embed] });
        }

        // Suivi de progression - voir sa progression
        if (interaction.commandName === 'progress') {
            const progress = userProgress[interaction.user.id] || [];
            let desc = progress.length > 0 ? progress.map(q => `- ${q}`).join('\n') : 'Aucune qu√™te suivie.';
            // Discord limite √† 4096 caract√®res pour description d'embed
            if (desc.length > 4000) desc = desc.slice(0, 3997) + '...';
            const embed = new EmbedBuilder()
                .setColor(0x27AE60)
                .setTitle('üìà Suivi de progression')
                .setDescription(desc);
            await interaction.reply({ embeds: [embed], ephemeral: true });
        }

        // Suivi de progression - ajouter une qu√™te
        if (interaction.commandName === 'addprogress') {
            const quest = interaction.options.getString('quete');
            if (!userProgress[interaction.user.id]) userProgress[interaction.user.id] = [];
            if (userProgress[interaction.user.id].includes(quest)) {
                await interaction.reply({ content: `La qu√™te "${quest}" est d√©j√† dans votre progression.`, ephemeral: true });
                return;
            }
            userProgress[interaction.user.id].push(quest);
            await interaction.reply({ content: `Qu√™te "${quest}" ajout√©e √† votre progression.`, ephemeral: true });
        }

        if (interaction.commandName === 'suggestion') {
            const style = interaction.options.getString('style') || 'polyvalent';
            const prompt = `Donne-moi un conseil personnalis√© pour un joueur de style "${style}" dans Gray Zone Warfare.`;
            const reply = await askMistral(prompt);
            const embed = new EmbedBuilder()
                .setColor(0x1ABC9C)
                .setTitle('üéØ Suggestion personnalis√©e')
                .setDescription(truncateField(reply));
            await interaction.reply({ embeds: [embed] });
        }

        if (interaction.commandName === 'youtube') {
            if (!YOUTUBE_API_KEY) {
                await interaction.reply({ content: "Cl√© API YouTube manquante dans `.env`.", ephemeral: true });
                return;
            }
            const url = `https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&maxResults=3&q=Gray%20Zone%20Warfare&key=${YOUTUBE_API_KEY}&order=date`;
            try {
                const res = await axios.get(url);
                const items = res.data.items || [];
                if (items.length === 0) {
                    await interaction.reply({ content: "Aucune vid√©o trouv√©e.", ephemeral: true });
                    return;
                }
                const embed = new EmbedBuilder()
                    .setColor(0xFF0000)
                    .setTitle('üé¨ Derni√®res vid√©os YouTube - Gray Zone Warfare');
                items.forEach(video => {
                    embed.addFields({
                        name: truncateField(video.snippet.title),
                        value: truncateField(`[Voir la vid√©o](https://www.youtube.com/watch?v=${video.id.videoId})\n${video.snippet.channelTitle}`)
                    });
                });
                await interaction.reply({ embeds: [embed] });
            } catch (e) {
                await interaction.reply({ content: "Erreur lors de la r√©cup√©ration des vid√©os YouTube.", ephemeral: true });
            }
        }

        if (interaction.commandName === 'reddit') {
            try {
                const res = await axios.get('https://www.reddit.com/r/GrayZoneWarfare/new.json?limit=3', {
                    headers: { 'User-Agent': 'GrayZoneWarfareBot/1.0' }
                });
                const posts = res.data.data.children || [];
                if (posts.length === 0) {
                    await interaction.reply({ content: "Aucun post trouv√©.", ephemeral: true });
                    return;
                }
                const embed = new EmbedBuilder()
                    .setColor(0xFF5700)
                    .setTitle('üì∞ Derniers posts Reddit - r/GrayZoneWarfare');
                posts.forEach(post => {
                    embed.addFields({
                        name: truncateField(post.data.title),
                        value: truncateField(`[Voir le post](https://reddit.com${post.data.permalink}) ‚Ä¢ üëç ${post.data.ups} ‚Ä¢ üí¨ ${post.data.num_comments}`)
                    });
                });
                await interaction.reply({ embeds: [embed] });
            } catch (e) {
                await interaction.reply({ content: "Erreur lors de la r√©cup√©ration des posts Reddit.", ephemeral: true });
            }
        }
        // ...ajoutez d'autres commandes slash ici...
    } catch (err) {
        console.error("Erreur lors du traitement d'une interaction:", err);
        if (interaction.replied || interaction.deferred) {
            await interaction.followUp({ content: "‚ùå Une erreur est survenue lors du traitement de la commande.", ephemeral: true });
        } else {
            await interaction.reply({ content: "‚ùå Une erreur est survenue lors du traitement de la commande.", ephemeral: true });
        }
    }
});

client.login(DISCORD_TOKEN);
